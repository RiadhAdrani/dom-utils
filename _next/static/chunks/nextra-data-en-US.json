{"/attribute":{"title":"Attributes","data":{"":"Handle element's attributes.","convertattributetodomproperty#convertAttributeToDomProperty()":"convert attribute to dom property.if the attribute is not found, we return the camel-cased version of the attribute.\nfunction (attr: string): string\n\nattr : html attribute.","isdataattr#isDataAttr()":"checks if the given string is a data-* attribute.\nfunction (attr: string): boolean\n\nattr : html attribute.","keyfromdataattr#keyFromDataAttr()":"get key from a data-* attribute.\n\"data-title\" => \"title\"\n\"my-attr\" => undefined\n\n\nfunction (attr: string): string | undefined\n\nattr : html attribute.","getdompropertybyattribute#getDomPropertyByAttribute()":"retrieve the dom property value by its html attribute counterpart.\nfunction <T = string>(attr: string, el: Element): T | undefined\n\nattr : html attribute.\nel : source element.","isnativetoggleableattribute#isNativeToggleableAttribute()":"checks if the given attribute is natively toggleable.\nfunction (attr: string): boolean\n\nattr : html attribute.","istoggledon#isToggledOn()":"checks if the given attribute is toggleable and toggled on.\nfunction (attr: string, el: Element): boolean\n\nattr : html attribute.\nel : source element.","toggleattribute#toggleAttribute()":"toggle the given attribute regardless of its type.\nfunction (attr: string, el: Element, value?: boolean): void\n\nattr : html attribute.\nel : source element.\nvalue: optional boolean.","setattribute#setAttribute()":"set the value of an element's attribute with the given name.\nfunction (attr: string, value: Arrayable<DomAttribute>, el: Element): void\n\nattr : html attribute.\nvalue: value.\nel : source element.","removeattribute#removeAttribute()":"remove the element's attribute with the given name.\nfunction (attr: string, el: Element): void\n\nattr : html attribute.\nel : source element."}},"/element":{"title":"Element","data":{"":"Create and manipulate DOM elements.","istextnode#isTextNode":"Check if the given element is a text node.\nfunction isTextNode(object: unknown): boolean;\n\nobject : element to be checked.","iselement#isElement":"Check if the given object is an HTML element.\nfunction isElement(object: unknown): boolean;\n\nobject : element to be checked.","createtextnode#createTextNode":"Create and return a text node with the given data.\nfunction createTextNode(data: string): Text;\n\ndata : text.","settextnodedata#setTextNodeData":"Update the content of a text node.\nfunction setTextNodeData(textNode: Text, data: string): void;\n\ntextNode : target node.\ndata : text.","createelement#createElement":"Create an element with the given options.\nfunction setTextNodeData<T = Element>(tag: DomTagName, params?: DomElementOptions): T;\n\ntag : element tag name.\nparams : element options.\n\n\nthrows an error if the tag is empty.","injectnode#injectNode":"Insert an element within a container in a given position.\nfunction injectNode(element: DomChild, parent: Element, index?: number): void;\n\nelement : element to be injected.\nparent : containing element.\nnumber : the index in which the element will be injected. if the index is larger than the number of the parent's children or is negative, it will be injected at the end.","iselementwithinelement#isElementWithinElement":"Check if the given element is container within the parent element.\nfunction isElementWithinElement(element: unknown, parentElement: Element): boolean;\n\nelement : target element.\nparent : containing element.","iselementwithindocument#isElementWithinDocument":"Check if the body of the document contains the given element.\nfunction isElementWithinDocument(element: unknown): boolean;\n\nelement : target element.","getelementposition#getElementPosition":"Return the index of the given element inside its parent container, or -1 otherwise.\nfunction getElementPosition(element: Element): number;\n\nelement : target element.","getelementchildrencount#getElementChildrenCount":"Retrieve the number of children within the given element. If element is not of type Element, -1 will be returned instead.Note that Text nodes are not considered as element children.\nfunction getElementChildrenCount(element: Element): number;\n\nelement : target element.","removechildatposition#removeChildAtPosition":"removes the element's children at the given position and return it if it exists, else it return false.\nfunction removeChildAtPosition(element: Element, position: number): ChildNode | false;\n\nelement : target element.\nposition : child index.","changechildposition#changeChildPosition":"Change the position of the given element inside its parent. if the element is not of type Element or does not has a parent, the function will exit.\nfunction removeChildAtPosition(element: Element, newPosition: number): void;\n\nelement : target element.\nnewPosition : new position.","removenode#removeNode":"Remove the given node\nfunction removeNode(node: Element | Text): void;\n\nnode : target element.","replacenodewith#replaceNodeWith":"Replace the given element with the new one.\nfunction replaceNodeWith(node: Element | Text, new Element: Element | Text): void;\n\nelement : target element.\nnewElement : new element."}},"/event":{"title":"Events","data":{"":"Handle elemen's events.","isoneventname#isOnEventName":"Check if the given name is valid event name.\nonclick is valid.\n\nonClick is valid.\n\nclick is not valid.\n\nfunction isOnEventName(name: string): boolean;\n\nname : name of the event.","setevent#setEvent":"Add an event with the given name to the target element.Behind the scene, we use element.addEventListener to add event, we store the callback in the element in a special key, so we can remove it later.\nfunction setEvent<T = Event, E = Element>(\nname: string,\ncallback: DomEventHandler<E, T>,\nelement: E\n): void;\n\nname : event's name.\ncallback : callback.\nelement : target element.\n\nSee also: DomEventHandler","removeevent#removeEvent":"Removes given element named event.\nfunction removeEvent(name: string, element: Element): void;\n\nname : event's name.\nelement : target element.\n\nSee also: DomEventHandler"}},"/":{"title":"DOM Utils","data":{"":"Dom Utils is a JavaScript library that, as its name suggest, allow to manipulate the DOM easily.\nElement\nAttribute\nEvent\nTyping","contributor#Contributor":"Riadh Adrani"}},"/types":{"title":"Types","data":{"":"Library's types.","arrayable#Arrayable":"type Arrayable<T> = T | Array<T>;","domattribute#DomAttribute":"type DomAttribute = string | boolean | Record<string, unknown> | undefined | null;","domeventtarget#DomEventTarget":"export type DomEventTarget<C = HTMLElement> = EventTarget & C;","domevent#DomEvent":"type DomEvent<E = Event, C = HTMLElement> = E & {\ntarget: DomEventTarget<HTMLElement>;\ncurrentTarget: DomEventTarget<C>;\n};","domeventhandler#DomEventHandler":"type DomEventHandler<El = HTMLElement, Ev = Event> = (event: DomEvent<Ev, El>) => void;","domchild#DomChild":"type DomChild = string | number | null | undefined | Element | Text;","domnamespace#DomNamespace":"type DomNamespace =\n| \"http://www.w3.org/2000/svg\"\n| \"http://www.w3.org/1999/xhtml\"\n| \"http://www.w3.org/1998/Math/MathML\";","domelementoptions#DomElementOptions":"type DomElementOptions = {\nattributes?: Record<string, Arrayable<DomAttribute>>;\nevents?: Record<string, DomEventHandler>;\nchildren?: Arrayable<DomChild>;\nnamespace?: DomNamespace;\n};","domtagname#DomTagName":"type DomTagName = StringWithAutoComplete<keyof HTMLElementTagNameMap>;","domeventname#DomEventName":"type DomEventName = StringWithAutoComplete<`on${keyof DocumentEventMap}`>;"}}}